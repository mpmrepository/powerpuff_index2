{"version":3,"sources":["pages/home/home.component.js","redux/fetchShowAction.js","redux/constants.js","pages/home/home.container.js","pages/episode/episode.info.js","pages/episode/episode.component.js","ErrorBoundary.js","modules/episode.card.js","modules/episode.list.js","App.js","App.container.js","serviceWorker.js","redux/fetchShowReducer.js","redux/rootReducer.js","index.js"],"names":["HomeComponent","name","summary","id","episodeList","showsPending","className","fetchShow","dispatch","type","fetch","then","response","json","data","payload","catch","error","fetchEpisodes","connect","state","showInfo","fetchShowReducer","fetchEpisodeReducer","episodesPending","onFetchShow","onFetchEpisodes","EpisodeInfo","episodes","epId","useParams","episode","find","x","Number","image","src","original","class","season","number","airdate","replace","EpisodeComponent","console","log","length","ErrorBoundary","props","hasError","info","this","setState","children","Component","EpisodeCard","useRouteMatch","to","key","EpisodesList","map","i","App","useEffect","pageImage","style","backgroundImage","exact","path","episodesError","Boolean","window","location","hostname","match","initialStateShowList","initialEpisodeList","rootReducer","combineReducers","action","Object","assign","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3a8f96df.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./home.style.scss\";\n\nconst HomeComponent = ({ name, id, summary, episodeList, showsPending }) => {\n  return showsPending ? (\n    <h1>loading</h1>\n  ) : (\n    <div className=\"pb16\">\n      <div className=\"show_title pb8\">\n        <h2>{name}</h2>\n      </div>\n      <div className=\"show_description show_section \">\n        <p>{summary}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeComponent;\n","import {\n  REQUEST_SHOW_PENDING,\n  REQUEST_SHOW_SUCCESS,\n  REQUEST_SHOW_FAILED,\n  REQUEST_EPISODELIST_PENDING,\n  REQUEST_EPISODELIST_SUCCESS,\n  REQUEST_EPISODELIST_FAILED,\n  REQUEST_EPISODE_PENDING,\n  REQUEST_EPISODE_SUCCESS,\n  REQUEST_EPISODE_FAILED,\n} from \"./constants\";\n\nexport const fetchShow = () => (dispatch) => {\n  dispatch({ type: REQUEST_SHOW_PENDING });\n  fetch(\"https://api.tvmaze.com/shows/6771\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_SHOW_SUCCESS, payload: data }))\n    .catch((error) => dispatch({ type: REQUEST_SHOW_FAILED, payload: error }));\n};\n\nexport const fetchEpisodes = () => (dispatch) => {\n  dispatch({ type: REQUEST_EPISODELIST_PENDING });\n  fetch(\"https://api.tvmaze.com/shows/6771/episodes\")\n    .then((response) => response.json())\n    .then((data) =>\n      dispatch({ type: REQUEST_EPISODELIST_SUCCESS, payload: data })\n    )\n    .catch((error) =>\n      dispatch({ type: REQUEST_EPISODELIST_FAILED, payload: error })\n    );\n};\n\nexport const fetchEpisode = (epId) => (dispatch) => {\n  dispatch({ type: REQUEST_EPISODE_PENDING });\n  fetch(`https://api.tvmaze.com/episodes/${epId}`)\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_EPISODE_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_EPISODE_FAILED, payload: error })\n    );\n};\n","export const REQUEST_SHOW_PENDING = \"REQUEST_SHOW_PENDING\";\nexport const REQUEST_SHOW_SUCCESS = \"REQUEST_SHOW_SUCCESS\";\nexport const REQUEST_SHOW_FAILED = \"REQUEST_SHOW_FAILED\";\nexport const REQUEST_EPISODELIST_PENDING = \"REQUEST_EPISODELIST_PENDING\";\nexport const REQUEST_EPISODELIST_SUCCESS = \"REQUEST_EPISODELIST_SUCCESS\";\nexport const REQUEST_EPISODELIST_FAILED = \"REQUEST_EPISODELIST_FAILED\";\n\nexport const REQUEST_EPISODE_PENDING = \"REQUEST_EPISODE_PENDING\";\nexport const REQUEST_EPISODE_SUCCESS = \"REQUEST_EPISODE_SUCCESS\";\nexport const REQUEST_EPISODE_FAILED = \"REQUEST_EPISODE_FAILED\";\n","import { connect } from \"react-redux\";\nimport HomeComponent from \"./home.component\";\nimport { fetchShow, fetchEpisodes } from \"../../redux/fetchShowAction\";\n\nconst mapStateToProps = (state) => {\n  return {\n    showInfo: state.fetchShowReducer.showInfo,\n    showsPending: state.fetchShowReducer.showsPending,\n    episodeList: state.fetchEpisodeReducer.episodeList,\n    episodesPending: state.fetchEpisodeReducer.episodesPending,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onFetchShow: () => {\n    dispatch(fetchShow());\n  },\n  onFetchEpisodes: () => {\n    dispatch(fetchEpisodes());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);\n","import React from \"react\";\nimport { useParams, Route, Link } from \"react-router-dom\";\n\nconst EpisodeInfo = ({ episodes }) => {\n  let { epId } = useParams();\n  let episode = episodes.find((x) => x.id === Number(epId));\n\n  return (\n    <div className=\"pb16\">\n      {episode.image ? (\n        <div className=\"show_description show_section pb8\">\n          <img src={episode.image.original} />\n        </div>\n      ) : null}\n\n      <div className=\"show_subtitle pb2\">\n        <h4>Episode details</h4>\n      </div>\n\n      <div className=\"show_title pb6 \">\n        <h1>{episode.name}</h1>\n      </div>\n      <div class=\"pb6\">\n        {episode.season ? <p>Season: {episode.season}</p> : null}\n        {episode.number ? <p>Episode: {episode.number}</p> : null}\n        {episode.airdate ? <p>Originally aired: {episode.airdate}</p> : null}\n      </div>\n\n      {episode.summary ? (\n        <div className=\"show_description  \">\n          <p>{episode.summary.replace(/(<([^>]+)>)/gi, \"\")}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default EpisodeInfo;\n","import React, { useEffect } from \"react\";\nimport EpisodeInfo from \"./episode.info\";\nimport { useParams, Route, Link } from \"react-router-dom\";\n\nconst EpisodeComponent = ({ episodes, episodesPending }) => {\n  console.log(episodes, episodes.length);\n  return episodesPending ? (\n    <h1>loading ep component</h1>\n  ) : (\n    <div className=\"home_section\">\n      <EpisodeInfo episodes={episodes} />\n    </div>\n  );\n};\n\nexport default EpisodeComponent;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h2>Oops, made a mistake</h2>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport \"./episode.card.scss\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nconst EpisodeCard = ({ name, id }) => {\n  let match = useRouteMatch();\n\n  return (\n    <Link to={`${id}`}>\n      <div key={id} className=\"episode_card\">\n        <div className=\"\">\n          <h4>{name} </h4>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default EpisodeCard;\n","import React from \"react\";\nimport EpisodeCard from \"./episode.card\";\n\nconst EpisodesList = ({ episodes }) => {\n  return (\n    <div className=\"wrapper\">\n      {episodes.map((episode, i) => {\n        return (\n          <EpisodeCard\n            key={episodes[i].id}\n            id={episodes[i].id}\n            name={episodes[i].name}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default EpisodesList;\n","import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport HomeComponent from \"./pages/home/home.container\";\nimport { Switch, Route, Link, useRouteMatch, NavLink } from \"react-router-dom\";\nimport EpisodeComponent from \"./pages/episode/episode.component\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport EpisodesList from \"./modules/episode.list\";\n\nconst App = (props) => {\n  const { onFetchShow, onFetchEpisodes } = props;\n  useEffect(() => {\n    onFetchShow();\n  }, [onFetchShow]);\n\n  useEffect(() => {\n    onFetchEpisodes();\n  }, [onFetchEpisodes]);\n\n  const { id, image, name } = props.showInfo;\n\n  const summary = props.showInfo.summary\n    ? props.showInfo.summary.replace(/(<([^>]+)>)/gi, \"\")\n    : \"content loading\";\n\n  const pageImage = image\n    ? image.original\n    : \"https://via.placeholder.com/800x1000/ddd/000.png/?text=Image+unavailable!\";\n\n  const { episodesPending, episodeList } = props;\n\n  return props.showsPending ? (\n    <div className=\"App\">\n      <p>loading</p>\n    </div>\n  ) : (\n    <div className=\"App\">\n      <div\n        className=\"cover_image\"\n        style={{ backgroundImage: `url(${pageImage})` }}\n      ></div>\n      <div className=\"app_wrapper\">\n        <div className=\"app_content\">\n          <nav className=\"pb16\">\n            <NavLink to={`/`} exact>\n              Home\n            </NavLink>\n          </nav>\n          <Switch>\n            <Route path={`/:epId`}>\n              <ErrorBoundary>\n                <EpisodeComponent\n                  episodesPending={episodesPending}\n                  episodes={episodeList}\n                />\n              </ErrorBoundary>\n            </Route>\n            <Route path=\"/\" exact>\n              <HomeComponent\n                summary={summary}\n                id={id}\n                name={name}\n                showsPending={props.showsPending}\n              />\n            </Route>\n          </Switch>\n          <div className=\"show_subtitle pb4\">\n            <h3>Episode list:</h3>\n          </div>\n          <div className=\"show_ep_list\">\n            <EpisodesList episodes={props.episodeList} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { fetchShow, fetchEpisodes } from \"./redux/fetchShowAction\";\n\nconst mapStateToProps = (state) => {\n  return {\n    showInfo: state.fetchShowReducer.showInfo,\n    showsPending: state.fetchShowReducer.showsPending,\n    episodeList: state.fetchEpisodeReducer.episodeList,\n    episodesPending: state.fetchEpisodeReducer.episodesPending,\n    episodesError: state.fetchEpisodeReducer.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onFetchShow: () => {\n    dispatch(fetchShow());\n  },\n  onFetchEpisodes: () => {\n    dispatch(fetchEpisodes());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  REQUEST_SHOW_PENDING,\n  REQUEST_SHOW_SUCCESS,\n  REQUEST_SHOW_FAILED,\n  REQUEST_EPISODELIST_PENDING,\n  REQUEST_EPISODELIST_SUCCESS,\n  REQUEST_EPISODELIST_FAILED,\n  REQUEST_EPISODE_PENDING,\n  REQUEST_EPISODE_SUCCESS,\n  REQUEST_EPISODE_FAILED,\n} from \"./constants\";\n\nconst initialStateShowList = {\n  showsPending: false,\n  showInfo: {},\n};\n\nexport const fetchShowReducer = (state = initialStateShowList, action = {}) => {\n  switch (action.type) {\n    case REQUEST_SHOW_PENDING:\n      return Object.assign({}, state, {\n        showsPending: true,\n      });\n    case REQUEST_SHOW_SUCCESS:\n      return Object.assign({}, state, {\n        showInfo: action.payload,\n        showsPending: false,\n      });\n    case REQUEST_SHOW_FAILED:\n      return Object.assign({}, state, {\n        showsPending: false,\n      });\n    default:\n      return state;\n  }\n};\n\nconst initialEpisodeList = {\n  episodesPending: true,\n  error: \"\",\n  episodeList: [],\n};\n\nexport const fetchEpisodeReducer = (\n  state = initialEpisodeList,\n  action = {}\n) => {\n  switch (action.type) {\n    case REQUEST_EPISODELIST_PENDING:\n      return Object.assign({}, state, { episodesPending: true });\n    case REQUEST_EPISODELIST_SUCCESS:\n      return Object.assign({}, state, {\n        episodeList: action.payload,\n        episodesPending: false,\n      });\n    case REQUEST_EPISODELIST_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        episodesPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { fetchShowReducer, fetchEpisodeReducer } from \"./fetchShowReducer\";\n\nconst rootReducer = combineReducers({\n  fetchShowReducer,\n  fetchEpisodeReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.container\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"./redux/rootReducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nconst composeEnhancers =\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(thunkMiddleware));\n\nconst store = createStore(rootReducer, enhancer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}